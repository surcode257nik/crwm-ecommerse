{"ast":null,"code":"var _jsxFileName = \"/Users/surajkumar/Projects/personal/reactapp/capstone/crwm-ecommerse/src/components/button/button.component.jsx\";\n/*\n3  buttons in application. we want to use same button but with different styling\n*/\n\nimport { BaseButton, GoogleSignInButton, InvertedButton } from \"./button.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BUTTON_TYPE_CLASSES = {\n  base: 'base',\n  google: 'google-sign-in',\n  inverted: 'inverted'\n};\nconst getButtons = (buttonType = BUTTON_TYPE_CLASSES.base) => ({\n  [BUTTON_TYPE_CLASSES.base]: BaseButton,\n  [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n  [BUTTON_TYPE_CLASSES.inverted]: InvertedButton\n})[buttonType];\nconst Button = ({\n  children,\n  buttonType,\n  ...otherProps\n}) => {\n  const CustomButton = getButtons(buttonType);\n  return /*#__PURE__*/_jsxDEV(CustomButton, {\n    ...otherProps,\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_c = Button;\nexport default Button;\nvar _c;\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"names":["BaseButton","GoogleSignInButton","InvertedButton","jsxDEV","_jsxDEV","BUTTON_TYPE_CLASSES","base","google","inverted","getButtons","buttonType","Button","children","otherProps","CustomButton","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/surajkumar/Projects/personal/reactapp/capstone/crwm-ecommerse/src/components/button/button.component.jsx"],"sourcesContent":["/*\n3  buttons in application. we want to use same button but with different styling\n*/\n\nimport { BaseButton, GoogleSignInButton, InvertedButton } from \"./button.styles\";\n\nexport const BUTTON_TYPE_CLASSES = {\n    base: 'base',\n    google : 'google-sign-in',\n    inverted: 'inverted'\n}\n\nconst getButtons = (buttonType = BUTTON_TYPE_CLASSES.base) => (\n    {\n        [BUTTON_TYPE_CLASSES.base]: BaseButton,\n        [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n        [BUTTON_TYPE_CLASSES.inverted]: InvertedButton\n    }[buttonType]\n)\n\n\nconst Button = ({children,buttonType, ...otherProps}) =>{\n    const CustomButton = getButtons(buttonType);\n    return(\n        <CustomButton {...otherProps} >{children} </CustomButton>\n    )\n}\nexport default Button;"],"mappings":";AAAA;AACA;AACA;;AAEA,SAASA,UAAU,EAAEC,kBAAkB,EAAEC,cAAc,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjF,OAAO,MAAMC,mBAAmB,GAAG;EAC/BC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAG,gBAAgB;EACzBC,QAAQ,EAAE;AACd,CAAC;AAED,MAAMC,UAAU,GAAGA,CAACC,UAAU,GAAGL,mBAAmB,CAACC,IAAI,KACrD;EACI,CAACD,mBAAmB,CAACC,IAAI,GAAGN,UAAU;EACtC,CAACK,mBAAmB,CAACE,MAAM,GAAGN,kBAAkB;EAChD,CAACI,mBAAmB,CAACG,QAAQ,GAAGN;AACpC,CAAC,EAACQ,UAAU,CACf;AAGD,MAAMC,MAAM,GAAGA,CAAC;EAACC,QAAQ;EAACF,UAAU;EAAE,GAAGG;AAAU,CAAC,KAAI;EACpD,MAAMC,YAAY,GAAGL,UAAU,CAACC,UAAU,CAAC;EAC3C,oBACIN,OAAA,CAACU,YAAY;IAAA,GAAKD,UAAU;IAAAD,QAAA,GAAIA,QAAQ,EAAC,GAAC;EAAA;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAc,CAAC;AAEjE,CAAC;AAAAC,EAAA,GALKR,MAAM;AAMZ,eAAeA,MAAM;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}