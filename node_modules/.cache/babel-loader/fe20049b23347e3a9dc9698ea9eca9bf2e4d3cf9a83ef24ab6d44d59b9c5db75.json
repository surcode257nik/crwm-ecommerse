{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBoD0_GJqz01SOkRdW81XRW5ezPFYVsHVU\",\n  authDomain: \"crwn-ecommerse-db.firebaseapp.com\",\n  projectId: \"crwn-ecommerse-db\",\n  storageBucket: \"crwn-ecommerse-db.appspot.com\",\n  messagingSenderId: \"1002260986751\",\n  appId: \"1:1002260986751:web:9a005b876dd954f169b84a\",\n  measurementId: \"G-Y9DZ0KCFXG\"\n};\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopUp = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit();\n  console.log(\"done\");\n};\nexport const createUserDocumentFromAuth = async (userAuth, additionalinformation = {}) => {\n  if (!userAuth) return;\n  const userDocRef = await doc(db, 'users', userAuth.uid); // takes 3 arguments -> db instance, users(collection in db, unique id(documentname))\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log('snapshot', userSnapshot);\n  console.log(userSnapshot.exists());\n\n  //if the user do not exists\n  // then create/set the document with the data from userauth in my collection\n\n  //if user exists\n  // then return userDocRef\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalinformation\n      });\n    } catch (error) {\n      console.log('errror creating the user', error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (auth, email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (auth, email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const SignOutUser = async () => await signOut(auth);\n_c = SignOutUser;\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);\nvar _c;\n$RefreshReg$(_c, \"SignOutUser\");","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopUp","signInWithGoogleRedirect","db","addCollectionsAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","console","log","createUserDocumentFromAuth","userAuth","additionalinformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","SignOutUser","_c","onAuthStateChangedListener","callback","$RefreshReg$"],"sources":["/Users/surajkumar/Projects/personal/reactapp/capstone/crwm-ecommerse/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\n\nimport { \n    getAuth, \n    signInWithRedirect, \n    signInWithPopup, \n    GoogleAuthProvider,\n    createUserWithEmailAndPassword,\n    signInWithEmailAndPassword,\n    signOut,\n    onAuthStateChanged\n} \nfrom 'firebase/auth';\n\nimport{\n    getFirestore,\n    doc,\n    getDoc,\n    setDoc,\n    collection,\n    writeBatch\n} from 'firebase/firestore';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBoD0_GJqz01SOkRdW81XRW5ezPFYVsHVU\",\n    authDomain: \"crwn-ecommerse-db.firebaseapp.com\",\n    projectId: \"crwn-ecommerse-db\",\n    storageBucket: \"crwn-ecommerse-db.appspot.com\",\n    messagingSenderId: \"1002260986751\",\n    appId: \"1:1002260986751:web:9a005b876dd954f169b84a\",\n    measurementId: \"G-Y9DZ0KCFXG\"\n};\n  // Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n    prompt:\"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopUp = () => signInWithPopup(auth,googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth,googleProvider);\n\nexport const db = getFirestore();\n\nexport const addCollectionsAndDocuments = async (collectionKey,objectsToAdd) => {\n    const collectionRef = collection(db,collectionKey);\n    const batch = writeBatch(db);\n\n    objectsToAdd.forEach((object) =>{\n        const docRef = doc(collectionRef,object.title.toLowerCase());\n        batch.set(docRef,object);\n    })\n\n    await batch.commit();\n    console.log(\"done\");\n};\n\nexport const createUserDocumentFromAuth = async (userAuth,\n        additionalinformation={}\n    ) => {\n    if(!userAuth) return;\n\n    const userDocRef = await doc(db,'users',userAuth.uid); // takes 3 arguments -> db instance, users(collection in db, unique id(documentname))\n    console.log(userDocRef);\n\n    const userSnapshot = await getDoc(userDocRef);\n    console.log('snapshot',userSnapshot);\n    console.log(userSnapshot.exists());\n\n    //if the user do not exists\n    // then create/set the document with the data from userauth in my collection\n\n    //if user exists\n    // then return userDocRef\n    if(!userSnapshot.exists()){\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n        try{\n            await setDoc(userDocRef,\n                {\n                displayName,email,createdAt,...additionalinformation\n                });\n        }catch(error){\n            console.log('errror creating the user', error.message);\n        }\n    }\n    return userDocRef\n}\n\nexport const createAuthUserWithEmailAndPassword = async (auth,email,password) =>{\n    if(!email || !password) return;\n\n    return await createUserWithEmailAndPassword(auth,email,password);\n}\n\nexport const signInAuthUserWithEmailAndPassword = async (auth,email,password) =>{\n    if(!email || !password) return;\n\n    return await signInWithEmailAndPassword(auth,email,password);\n}\n\nexport const SignOutUser = async() =>  await signOut(auth);\n\nexport const onAuthStateChangedListener = (callback) => onAuthStateChanged(auth,callback);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}