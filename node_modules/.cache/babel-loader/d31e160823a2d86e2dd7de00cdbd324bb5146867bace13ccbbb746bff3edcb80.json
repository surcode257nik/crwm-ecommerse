{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBoD0_GJqz01SOkRdW81XRW5ezPFYVsHVU\",\n  authDomain: \"crwn-ecommerse-db.firebaseapp.com\",\n  projectId: \"crwn-ecommerse-db\",\n  storageBucket: \"crwn-ecommerse-db.appspot.com\",\n  messagingSenderId: \"1002260986751\",\n  appId: \"1:1002260986751:web:9a005b876dd954f169b84a\",\n  measurementId: \"G-Y9DZ0KCFXG\"\n};\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopUp = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = await doc(db, 'users', userAuth.uid); // takes 3 arguments -> db instance, users(collection in db, unique id(documentname))\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log('snapshot', userSnapshot);\n  console.log(userSnapshot.exists());\n\n  //if the user do not exists\n  // then create/set the document with the data from userauth in my collection\n\n  //if user exists\n  // then return userDocRef\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userDocRef;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log('errror creating the user', error.message);\n    }\n  }\n  return userDocRef;\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopUp","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","message"],"sources":["/Users/surajkumar/Projects/personal/reactapp/capstone/crwm-ecommerse/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\n\nimport { \n    getAuth, \n    signInWithRedirect, \n    signInWithPopup, \n    GoogleAuthProvider\n} \nfrom 'firebase/auth';\n\nimport{\n    getFirestore,\n    doc,\n    getDoc,\n    setDoc\n} from 'firebase/firestore';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBoD0_GJqz01SOkRdW81XRW5ezPFYVsHVU\",\n    authDomain: \"crwn-ecommerse-db.firebaseapp.com\",\n    projectId: \"crwn-ecommerse-db\",\n    storageBucket: \"crwn-ecommerse-db.appspot.com\",\n    messagingSenderId: \"1002260986751\",\n    appId: \"1:1002260986751:web:9a005b876dd954f169b84a\",\n    measurementId: \"G-Y9DZ0KCFXG\"\n};\n  // Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({\n    prompt:\"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopUp = () => signInWithPopup(auth,provider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n    const userDocRef = await doc(db,'users',userAuth.uid); // takes 3 arguments -> db instance, users(collection in db, unique id(documentname))\n    console.log(userDocRef);\n\n    const userSnapshot = await getDoc(userDocRef);\n    console.log('snapshot',userSnapshot);\n    console.log(userSnapshot.exists());\n\n    //if the user do not exists\n    // then create/set the document with the data from userauth in my collection\n\n    //if user exists\n    // then return userDocRef\n    if(!userSnapshot.exists()){\n        const {displayName,email} = userDocRef;\n        const createdAt = new Date();\n        try{\n            await setDoc(userDocRef,\n                {\n                displayName,email,createdAt,\n                });\n        }catch(error){\n            console.log('errror creating the user', error.message);\n        }\n    }\n    return userDocRef\n}\n\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAE5C,SACIC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,QAEjB,eAAe;AAEpB,SACIC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,MAAM,QACH,oBAAoB;AAE3B,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,mCAAmC;EAC/CC,SAAS,EAAE,mBAAmB;EAC9BC,aAAa,EAAE,+BAA+B;EAC9CC,iBAAiB,EAAE,eAAe;EAClCC,KAAK,EAAE,4CAA4C;EACnDC,aAAa,EAAE;AACnB,CAAC;AACC;AACF,MAAMC,WAAW,GAAGjB,aAAa,CAACS,cAAc,CAAC;AAEjD,MAAMS,QAAQ,GAAG,IAAId,kBAAkB,CAAC,CAAC;AAEzCc,QAAQ,CAACC,mBAAmB,CAAC;EACzBC,MAAM,EAAC;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGpB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMqB,qBAAqB,GAAGA,CAAA,KAAMnB,eAAe,CAACkB,IAAI,EAACH,QAAQ,CAAC;AAEzE,OAAO,MAAMK,EAAE,GAAGlB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC1D,MAAMC,UAAU,GAAG,MAAMpB,GAAG,CAACiB,EAAE,EAAC,OAAO,EAACE,QAAQ,CAACE,GAAG,CAAC,CAAC,CAAC;EACvDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EAEvB,MAAMI,YAAY,GAAG,MAAMvB,MAAM,CAACmB,UAAU,CAAC;EAC7CE,OAAO,CAACC,GAAG,CAAC,UAAU,EAACC,YAAY,CAAC;EACpCF,OAAO,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAAC,CAAC,CAAC;;EAElC;EACA;;EAEA;EACA;EACA,IAAG,CAACD,YAAY,CAACC,MAAM,CAAC,CAAC,EAAC;IACtB,MAAM;MAACC,WAAW;MAACC;IAAK,CAAC,GAAGP,UAAU;IACtC,MAAMQ,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC5B,IAAG;MACC,MAAM3B,MAAM,CAACkB,UAAU,EACnB;QACAM,WAAW;QAACC,KAAK;QAACC;MAClB,CAAC,CAAC;IACV,CAAC,QAAME,KAAK,EAAC;MACTR,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEO,KAAK,CAACC,OAAO,CAAC;IAC1D;EACJ;EACA,OAAOX,UAAU;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}